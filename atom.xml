<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>torvalds小纪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-06T10:38:29.129Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>torvalds</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOs7 下Docker方式搭建Kafka</title>
    <link href="http://example.com/2023/06/06/CentOs7%20%E4%B8%8BDocker%E6%96%B9%E5%BC%8F%E6%90%AD%E5%BB%BAKafka/"/>
    <id>http://example.com/2023/06/06/CentOs7%20%E4%B8%8BDocker%E6%96%B9%E5%BC%8F%E6%90%AD%E5%BB%BAKafka/</id>
    <published>2023-06-06T10:38:29.107Z</published>
    <updated>2023-06-06T10:38:29.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CentOs7-下Docker方式搭建Kafka"><a href="#CentOs7-下Docker方式搭建Kafka" class="headerlink" title="CentOs7 下Docker方式搭建Kafka"></a>CentOs7 下Docker方式搭建Kafka</h3><ol><li>安装Docker</li></ol><p>在CentOS 7虚拟机上安装Docker，可以通过以下命令进行：</p><pre><code>sudo yum install docker </code></pre><p>安装完成后，启动Docker服务并设置为开机自启：</p><pre><code>sudo systemctl start docker sudo systemctl enable docker </code></pre><ol start="2"><li>创建一个Docker网络，用于Kafka容器和Zookeeper容器之间的通信。可以使用以下命令创建一个名为<code>kafka-net</code>的网络：</li></ol><pre><code>docker network create kafka-net</code></pre><ol start="3"><li>Zookeeper</li></ol><p>&lt;1&gt; 通过Docker Hub下载Zookeeper镜像，可以使用以下命令：</p><pre><code>docker pull zookeeper </code></pre><p>&lt;2&gt; 启动Zookeeper容器</p><p>可以使用以下命令启动Zookeeper容器：</p><pre><code>docker run -d \    --name zookeeper \    --network kafka-net \    -p 2181:2181 \    zookeeper</code></pre><p>其中，<code>kafka-net</code>是之前创建的Docker网络。</p><ol start="4"><li>Kafka</li></ol><p>&lt;1&gt; 通过Docker Hub下载Kafka镜像，可以使用以下命令：</p><pre><code>docker pull wurstmeister/kafka </code></pre><p>&lt;2&gt; 启动Kafka容器</p><p>创建完成后，可以通过以下命令启动Kafka容器：</p><pre><code>docker run -d \        --name kafka \        --network kafka-net \        -p 9092:9092 \        -e KAFKA_ADVERTISED_HOST_NAME=&lt;你的虚拟机IP&gt; \        -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \        -e KAFKA_ADVERTISED_PORT=9092 \        -e KAFKA_CREATE_TOPICS=&lt;topic名&gt;:&lt;partition数&gt;:&lt;replication factor&gt; \        wurstmeister/kafka </code></pre><p>其中，</p><p><code>&lt;你的虚拟机IP&gt;</code>需要替换为你的虚拟机IP地址，</p><p><code>&lt;topic名&gt;:&lt;partition数&gt;:&lt;replication factor&gt;</code>需要替换为你要创建的topic的名称、分区数和副本数。</p><p>例如，要创建一个名为<code>test</code>的topic，包含3个分区和2个副本，可以使用以下命令：</p><pre><code>docker run -d \    --name kafka \    --network kafka-net \    -p 9092:9092 \    -e KAFKA_ADVERTISED_HOST_NAME=192.168.2.40 \    -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \    -e KAFKA_ADVERTISED_PORT=9092 \    -e KAFKA_CREATE_TOPICS=test:3:2 \    wurstmeister/kafka</code></pre><ol start="5"><li><p>验证</p><p>Kafka容器启动后，可以使用以下命令进入容器内部：</p><pre><code>docker exec -it kafka /bin/bash </code></pre><p>进入容器后，可以使用Kafka自带的命令行工具<code>kafka-console-producer.sh</code>和<code>kafka-console-consumer.sh</code>进行测试。例如，使用以下命令向<code>test</code>主题发送消息：</p><pre><code>/opt/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test </code></pre><p>使用以下命令从<code>test</code>主题消费消息：</p><pre><code>/opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning </code></pre><p>至此，你就可以在CentOS 7虚拟机上通过Docker安装和使用Kafka了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CentOs7-下Docker方式搭建Kafka&quot;&gt;&lt;a href=&quot;#CentOs7-下Docker方式搭建Kafka&quot; class=&quot;headerlink&quot; title=&quot;CentOs7 下Docker方式搭建Kafka&quot;&gt;&lt;/a&gt;CentOs7 下Docke
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Redis和数据库的缓存一致性问题</title>
    <link href="http://example.com/2023/05/31/Redis%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/05/31/Redis%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-31T14:17:13.000Z</published>
    <updated>2023-06-01T10:41:13.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis和数据库的如何保证缓存一致性？"><a href="#Redis和数据库的如何保证缓存一致性？" class="headerlink" title="Redis和数据库的如何保证缓存一致性？"></a>Redis和数据库的如何保证缓存一致性？</h1><p>Redis和数据库的缓存一致性问题是一个常见的挑战，这个问题涉及到如何确保缓存数据与数据库数据的一致性。在实际应用中，如果缓存数据与数据库数据不一致，可能会导致严重的后果，例如数据丢失、数据不一致等问题。因此，解决这个问题是非常重要的。</p><p>在本文中，我们将讨论Redis和数据库的缓存一致性问题，并提供一些解决方案，以确保缓存数据与数据库数据的一致性。</p><h3 id="1-什么是Redis和数据库的缓存一致性问题？"><a href="#1-什么是Redis和数据库的缓存一致性问题？" class="headerlink" title="1. 什么是Redis和数据库的缓存一致性问题？"></a>1. 什么是Redis和数据库的缓存一致性问题？</h3><p>Redis缓存一致性问题指的是当应用程序使用Redis作为缓存时，缓存中的数据与数据库中的数据不一致的情况。</p><p>Redis是一种基于内存的键值存储系统，它可以用来缓存数据以提高应用程序的性能。在实际应用中，我们通常会使用Redis来缓存一些经常使用的数据，例如用户信息、商品信息等。</p><p>然而，在使用Redis缓存数据时，我们需要考虑到缓存数据与数据库数据的一致性问题。因为Redis是基于内存的，所以如果缓存数据与数据库数据不一致，可能会导致数据丢失、数据不一致等问题。</p><p>例如，假设我们有一个在线商店，我们将商品信息存储在数据库中，并使用Redis作为缓存。当用户查看商品时，我们首先检查Redis缓存中是否存在该商品信息。如果存在，则返回缓存数据。否则，我们从数据库中检索数据，并将其存储在Redis缓存中以供以后使用。</p><p>现在假设我们更改了某个商品的价格，并更新了数据库中的数据。但是，由于Redis缓存中仍然存在旧的商品信息，因此当用户再次查看该商品时，他们将看到旧的价格。这会导致用户的困惑和不满，并对商店的声誉造成影响。</p><p>因此，我们必须确保缓存中的数据始终与数据库中的数据保持一致。</p><p><strong>问题的关键：一份数据同时保存在数据库和Redis中，当数据发生变化时，需要同时去更新数据库和Redis。由于更新操作是有先后顺序的，它并不像MySQL中多表事务操作可以同时满足ACID的特性，所以就会存在数据一致性问题。</strong></p><h3 id="2-可供选择的几种方案"><a href="#2-可供选择的几种方案" class="headerlink" title="2. 可供选择的几种方案"></a>2. 可供选择的几种方案</h3><p>为了解决Redis和数据库的缓存一致性问题，我们可以采用以下几种解决方案：</p><ul><li>先更新数据库，再更新缓存</li><li>先删除缓存，再更新数据库</li></ul><h4 id="2-1-先更新数据库，再更新缓存"><a href="#2-1-先更新数据库，再更新缓存" class="headerlink" title="2.1. 先更新数据库，再更新缓存"></a>2.1. 先更新数据库，再更新缓存</h4><h5 id="理想情况下："><a href="#理想情况下：" class="headerlink" title="理想情况下："></a>理想情况下：</h5><p>更新数据库成功，更新缓存成功 —— 不会存在一致性问题</p><h5 style="color:red">极端情况下：</h5><p>更新数据库成功，更新缓存失败 —— 存在一致性问题（缓存中的数据为脏数据）</p><p>解决方案：<br>对更新缓存操作进行异常捕获，如果更新缓存失败，对缓存进行重试删除，不能让脏数据在缓存中持续的时间太长。<br>ps：如果重试一定次数之后仍然失败，触发告警，人工介入。</p><h4 id="2-2-先删除缓存，再更新数据库"><a href="#2-2-先删除缓存，再更新数据库" class="headerlink" title="2.2. 先删除缓存，再更新数据库"></a>2.2. 先删除缓存，再更新数据库</h4><blockquote><p>因为删除缓存操作和更新数据库这两个操作不是<strong>原子性</strong>操作，在这个过程中是否有其他的线程来访问会决定会不会存在一致性问题。</p></blockquote><h5 id="理想情况下：-1"><a href="#理想情况下：-1" class="headerlink" title="理想情况下："></a>理想情况下：</h5><p>删除缓存和更新数据库期间，没有其他线程来访问 —— 不会存在一致性问题</p><h5 style="color:red">极端情况下：</h5><p>删除缓存和更新数据库期间，有其他线程来访问 —— 存在一致性问题</p><p>解决方案：<br>在更新数据库成功，再次删除缓存，避免缓存中已被更新成脏数据。<br>ps：删除操作还是采用重试删除（如果重试一定次数之后仍然失败，触发告警，人工介入）</p><p>双写策略是指在更新数据库时同时更新Redis缓存和数据库。这确保了数据始终保持一致，并提高了系统可用性。</p><p>例如，在上面的示例中，我们可以在更新商品信息时同时更新Redis缓存和数据库。这将确保下一个请求从Redis缓存中检索最新数据，并避免了不一致性问题。如果Redis发生故障，则可以从数据库中检索最新数据。</p><p>这种方案可以确保缓存数据与数据库数据的一致性。但是，在高并发情况下，由于需要频繁地访问数据库，可能会影响系统的性能。使用读写锁减少对数据库的访问，读写锁可以确保多个应用程序同时访问同一个数据时，只有一个应用程序可以更新数据。这可以减少并发更新引起的问题，并减少数据库负载。</p><h4 id="2-3-先更新数据库，延迟更新缓存（最终一致性方案）"><a href="#2-3-先更新数据库，延迟更新缓存（最终一致性方案）" class="headerlink" title="2.3. 先更新数据库，延迟更新缓存（最终一致性方案）"></a>2.3. 先更新数据库，延迟更新缓存（最终一致性方案）</h4><p>当数据发生变化时，先更新数据库，针对缓存的更新可以采用Canal组件来监听MySQL的binlog日志或者基于RocketMQ的可靠性消息通信来实现最终一致性</p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>Redis和数据库的缓存一致性问题是一个常见的挑战。为了确保缓存数据与数据库数据的一致性，我们可以采用以上三种解决方案。</p><p>在实际应用中，我们需要根据具体情况选择最适合自己的方案。同时，在使用Redis缓存数据时，我们需要注意缓存数据与数据库数据的一致性，并且需要对系统进行充分测试以确保系统稳定性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis和数据库的如何保证缓存一致性？&quot;&gt;&lt;a href=&quot;#Redis和数据库的如何保证缓存一致性？&quot; class=&quot;headerlink&quot; title=&quot;Redis和数据库的如何保证缓存一致性？&quot;&gt;&lt;/a&gt;Redis和数据库的如何保证缓存一致性？&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>@Lombok注解常见的一些坑点</title>
    <link href="http://example.com/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
    <id>http://example.com/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</id>
    <published>2023-05-18T03:06:14.000Z</published>
    <updated>2023-05-18T08:50:08.821Z</updated>
    
    <content type="html"><![CDATA[<p>Lombok 是一个 Java 库，可以通过注解的方式来简化 Java 代码的编写。虽然 Lombok 的使用可以减少代码量，并提高代码的可读性和可维护性，但是在使用的时候还是需要注意一些坑点。</p><p>以下是一些常见的 Lombok 使用坑点：</p><ol><li>@Data 注解可能会导致无限递归。@Data 注解会自动生成 getter、setter、toString、equals、hashCode 方法，如果在类中包含了自己的实例变量，那么就会导致无限递归。因此，在使用 @Data 注解时需要注意这个问题，可以使用其他注解来代替。</li><li>@Builder 注解需要注意链式调用的顺序。@Builder 注解可以用于创建复杂对象，使用链式调用的方式设置属性。但是需要注意的是，设置属性的顺序需要与构造函数的参数顺序一致，否则会导致属性设置错误。</li><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解可能会导致构造函数参数过多。@AllArgsConstructor 注解会生成一个包含所有实例变量的构造函数，而 @RequiredArgsConstructor 注解则会生成一个包含必需实例变量的构造函数。这两个注解都可能会导致构造函数参数过多的问题，需要根据实际情况进行选择。</li><li>@Synchronized 注解可能会导致性能问题。@Synchronized 注解可以用于对方法进行同步，但是会导致性能问题。因此在使用 @Synchronized 注解时需要注意控制同步的范围，避免出现性能问题。</li><li>IDEA 等 IDE 工具可能无法正确识别 Lombok 注解。虽然 Lombok 支持大多数主流的 IDE 工具，但是有时候会出现 IDE 工具无法正确识别 Lombok 注解的情况。如果遇到这种情况，可以尝试更新 IDE 工具的插件或者升级 Lombok 的版本。</li></ol><p>以上是一些常见的 Lombok 使用坑点，需要在使用 Lombok 时注意。</p><hr><h3 id="1-Data-注解导致无限递归的案例"><a href="#1-Data-注解导致无限递归的案例" class="headerlink" title="1. @Data 注解导致无限递归的案例"></a>1. @Data 注解导致无限递归的案例</h3><pre><code class="java">@Datapublic class User {    private Long id;    private String username;    private String password;    private List&lt;Role&gt; roles;    public User() {        this.roles = new ArrayList&lt;&gt;();    }}@Datapublic class Role {    private Long id;    private String roleName;    private List&lt;User&gt; users;    public Role() {        this.users = new ArrayList&lt;&gt;();    }}public class AppTest extends TestCase {    public void testUserAndRole() {        User user1 = new User();        user1.setId(1L);        user1.setUsername(&quot;user1&quot;);        user1.setPassword(&quot;password1&quot;);        User user2 = new User();        user2.setId(2L);        user2.setUsername(&quot;user2&quot;);        user2.setPassword(&quot;password2&quot;);        Role role1 = new Role();        role1.setId(1L);        role1.setRoleName(&quot;role1&quot;);        Role role2 = new Role();        role2.setId(2L);        role2.setRoleName(&quot;role2&quot;);        user1.getRoles().add(role1);        user1.getRoles().add(role2);        user2.getRoles().add(role2);        role2.getUsers().add(user1);        role2.getUsers().add(user1);        role2.getUsers().add(user2);        System.out.println(user1.toString());        System.out.println(role1.toString());    }}</code></pre><p>上面的代码中，User 类和 Role 类之间是多对多的关系，都包含了对方的实例变量。这样在使用 @Data 注解时，会导致无限递归，从而导致 StackOverflowError 错误。</p><pre><code class="java">java.lang.StackOverflowError    at java.base/java.lang.String.valueOf(String.java:2951)    at com.ria.bean.Role.toString(Role.java:8)    at java.base/java.lang.String.valueOf(String.java:2951)    at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)    at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)    at java.base/java.lang.String.valueOf(String.java:2951)    at com.ria.bean.User.toString(User.java:8)</code></pre><p><strong>解决方法：</strong></p><p>可以使用 @ToString、@EqualsAndHashCode、@Getter、@Setter、@RequiredArgsConstructor 注解来代替 @Data 注解，分别生成 toString、equals、hashCode、getter、setter、构造函数等方法。</p><h3 id="2-Builder-注解链式调用顺序错误的案例："><a href="#2-Builder-注解链式调用顺序错误的案例：" class="headerlink" title="2.@Builder 注解链式调用顺序错误的案例："></a>2.@Builder 注解链式调用顺序错误的案例：</h3><pre><code class="java">@Builderpublic class User {    private Long id;    private String username;    private String password;    private Integer age;}User user = User.builder()    .username(&quot;test&quot;)    .age(20)    .id(1L)    .build();</code></pre><p>上面的代码中，使用 @Builder 注解创建 User 对象时，设置属性的顺序与构造函数的参数顺序不一致，导致创建 User 对象时属性设置错误。</p><p>解决方法：</p><p>需要保证设置属性的顺序与构造函数的参数顺序一致，可以使用 @Builder.Default 注解为属性设置默认值来解决这个问题。</p><ol start="3"><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解导致构造函数参数过多的案例：</li></ol><pre><code class="java">@AllArgsConstructorpublic class User {    private Long id;    private String username;    private String password;    private String email;    private String phone;    private String address;    private Integer age;    // 省略 getter、setter 方法}User user = new User(1L, &quot;test&quot;, &quot;123456&quot;, &quot;test@test.com&quot;, &quot;123456789&quot;, &quot;北京市&quot;, 20);</code></pre><p>上面的代码中，使用 @AllArgsConstructor 注解为 User 类生成了一个包含所有实例变量的构造函数，导致构造函数参数过多，不便于使用。</p><p>解决方法：</p><p>可以使用 @NoArgsConstructor、@NonNull、@Builder 等注解来代替 @AllArgsConstructor 注解，根据实际情况选择合适的注解。</p><ol start="4"><li>@Synchronized 注解导致性能问题的案例：</li></ol><pre><code class="java">@Datapublic class User {    private Long id;    private String username;    private String password;    private String email;    private String phone;    private String address;    private Integer age;    @Synchronized    public void updateUser(User user) {        // 更新用户信息    }}</code></pre><p>上面的代码中，使用 @Synchronized 注解对 updateUser 方法进行同步，但是这会导致性能问题。</p><p>解决方法：</p><p>可以通过其他方式来控制同步的范围，如使用 synchronized 关键字或者使用 Lock 接口等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lombok 是一个 Java 库，可以通过注解的方式来简化 Java 代码的编写。虽然 Lombok 的使用可以减少代码量，并提高代码的可读性和可维护性，但是在使用的时候还是需要注意一些坑点。&lt;/p&gt;
&lt;p&gt;以下是一些常见的 Lombok 使用坑点：&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
</feed>
