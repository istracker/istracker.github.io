<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis和数据库的缓存一致性问题</title>
      <link href="/2023/05/31/Redis%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/31/Redis%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis和数据库的缓存一致性问题"><a href="#Redis和数据库的缓存一致性问题" class="headerlink" title="Redis和数据库的缓存一致性问题"></a>Redis和数据库的缓存一致性问题</h1><p>Redis和数据库的缓存一致性问题是一个常见的挑战，这个问题涉及到如何确保缓存数据与数据库数据的一致性。在实际应用中，如果缓存数据与数据库数据不一致，可能会导致严重的后果，例如数据丢失、数据不一致等问题。因此，解决这个问题是非常重要的。</p><p>在本文中，我们将讨论Redis和数据库的缓存一致性问题，并提供一些解决方案，以确保缓存数据与数据库数据的一致性。</p><ol><li>什么是Redis和数据库的缓存一致性问题？</li></ol><p>Redis是一种基于内存的键值存储系统，它可以用来缓存数据以提高应用程序的性能。在实际应用中，我们通常会使用Redis来缓存一些经常使用的数据，例如用户信息、商品信息等。</p><p>然而，在使用Redis缓存数据时，我们需要考虑到缓存数据与数据库数据的一致性问题。因为Redis是基于内存的，所以如果缓存数据与数据库数据不一致，可能会导致数据丢失、数据不一致等问题。</p><p>例如，在一个电商网站中，如果一个用户购买了商品并付款成功，但是由于某些原因，Redis中的缓存数据没有更新，那么当这个用户再次访问该商品时，可能会显示该商品还未购买。这种情况下，用户可能会认为自己付款失败了，从而导致用户体验不佳。</p><ol start="2"><li>解决方案</li></ol><p>为了解决Redis和数据库的缓存一致性问题，我们可以采用以下几种解决方案：</p><p>2.1. 数据库优先</p><p>在这种方案中，我们优先使用数据库中的数据，然后再使用Redis中的缓存数据。当我们需要更新数据时，我们先更新数据库中的数据，然后再更新Redis中的缓存数据。</p><p>这种方案可以确保缓存数据与数据库数据的一致性。但是，在高并发情况下，由于需要频繁地访问数据库，可能会影响系统的性能。</p><p>2.2. Redis优先</p><p>在这种方案中，我们优先使用Redis中的缓存数据，然后再使用数据库中的数据。当我们需要更新数据时，我们先更新Redis中的缓存数据，然后再更新数据库中的数据。</p><p>这种方案可以提高系统的性能，并且可以减少对数据库的访问。但是，在更新Redis中的缓存数据时，如果更新失败，则可能会导致缓存数据与数据库数据不一致。</p><p>为了解决这个问题，我们可以使用Redis事务机制来确保缓存数据与数据库数据的一致性。在Redis事务中，我们可以将多个操作打包成一个原子操作，然后一次性执行。如果其中有一个操作失败，则所有操作都会回滚。</p><p>2.3. 双写一致性</p><p>在这种方案中，我们同时更新数据库和Redis中的缓存数据。当我们需要更新数据时，我们先更新数据库中的数据，然后再更新Redis中的缓存数据。</p><p>这种方案可以确保缓存数据与数据库数据的一致性。但是，在高并发情况下，由于需要频繁地访问数据库和Redis，可能会影响系统的性能。</p><ol start="3"><li>总结</li></ol><p>Redis和数据库的缓存一致性问题是一个常见的挑战。为了确保缓存数据与数据库数据的一致性，我们可以采用以上三种解决方案。</p><p>在实际应用中，我们需要根据具体情况选择最适合自己的方案。同时，在使用Redis缓存数据时，我们需要注意缓存数据与数据库数据的一致性，并且需要对系统进行充分测试以确保系统稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Lombok注解常见的一些坑点</title>
      <link href="/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
      <url>/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>Lombok 是一个 Java 库，可以通过注解的方式来简化 Java 代码的编写。虽然 Lombok 的使用可以减少代码量，并提高代码的可读性和可维护性，但是在使用的时候还是需要注意一些坑点。</p><p>以下是一些常见的 Lombok 使用坑点：</p><ol><li>@Data 注解可能会导致无限递归。@Data 注解会自动生成 getter、setter、toString、equals、hashCode 方法，如果在类中包含了自己的实例变量，那么就会导致无限递归。因此，在使用 @Data 注解时需要注意这个问题，可以使用其他注解来代替。</li><li>@Builder 注解需要注意链式调用的顺序。@Builder 注解可以用于创建复杂对象，使用链式调用的方式设置属性。但是需要注意的是，设置属性的顺序需要与构造函数的参数顺序一致，否则会导致属性设置错误。</li><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解可能会导致构造函数参数过多。@AllArgsConstructor 注解会生成一个包含所有实例变量的构造函数，而 @RequiredArgsConstructor 注解则会生成一个包含必需实例变量的构造函数。这两个注解都可能会导致构造函数参数过多的问题，需要根据实际情况进行选择。</li><li>@Synchronized 注解可能会导致性能问题。@Synchronized 注解可以用于对方法进行同步，但是会导致性能问题。因此在使用 @Synchronized 注解时需要注意控制同步的范围，避免出现性能问题。</li><li>IDEA 等 IDE 工具可能无法正确识别 Lombok 注解。虽然 Lombok 支持大多数主流的 IDE 工具，但是有时候会出现 IDE 工具无法正确识别 Lombok 注解的情况。如果遇到这种情况，可以尝试更新 IDE 工具的插件或者升级 Lombok 的版本。</li></ol><p>以上是一些常见的 Lombok 使用坑点，需要在使用 Lombok 时注意。</p><hr><h3 id="1-Data-注解导致无限递归的案例"><a href="#1-Data-注解导致无限递归的案例" class="headerlink" title="1. @Data 注解导致无限递归的案例"></a>1. @Data 注解导致无限递归的案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">></span></span> roles<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> roleName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserAndRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Role</span> role1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role1<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> role2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role2<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>role1<span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>        user2<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>        role2<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        role2<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        role2<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，User 类和 Role 类之间是多对多的关系，都包含了对方的实例变量。这样在使用 @Data 注解时，会导致无限递归，从而导致 StackOverflowError 错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2951</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ria<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>Role</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2951</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StringBuilder</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">168</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>AbstractCollection</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">AbstractCollection</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">473</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2951</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ria<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>User</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方法：</strong></p><p>可以使用 @ToString、@EqualsAndHashCode、@Getter、@Setter、@RequiredArgsConstructor 注解来代替 @Data 注解，分别生成 toString、equals、hashCode、getter、setter、构造函数等方法。</p><h3 id="2-Builder-注解链式调用顺序错误的案例："><a href="#2-Builder-注解链式调用顺序错误的案例：" class="headerlink" title="2.@Builder 注解链式调用顺序错误的案例："></a>2.@Builder 注解链式调用顺序错误的案例：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，使用 @Builder 注解创建 User 对象时，设置属性的顺序与构造函数的参数顺序不一致，导致创建 User 对象时属性设置错误。</p><p>解决方法：</p><p>需要保证设置属性的顺序与构造函数的参数顺序一致，可以使用 @Builder.Default 注解为属性设置默认值来解决这个问题。</p><ol start="3"><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解导致构造函数参数过多的案例：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">// 省略 getter、setter 方法</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token string">"test@test.com"</span><span class="token punctuation">,</span> <span class="token string">"123456789"</span><span class="token punctuation">,</span> <span class="token string">"北京市"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，使用 @AllArgsConstructor 注解为 User 类生成了一个包含所有实例变量的构造函数，导致构造函数参数过多，不便于使用。</p><p>解决方法：</p><p>可以使用 @NoArgsConstructor、@NonNull、@Builder 等注解来代替 @AllArgsConstructor 注解，根据实际情况选择合适的注解。</p><ol start="4"><li>@Synchronized 注解导致性能问题的案例：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Synchronized</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新用户信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，使用 @Synchronized 注解对 updateUser 方法进行同步，但是这会导致性能问题。</p><p>解决方法：</p><p>可以通过其他方式来控制同步的范围，如使用 synchronized 关键字或者使用 Lock 接口等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
