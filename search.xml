<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>@Lombok注解常见的一些坑点</title>
      <link href="/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
      <url>/2023/05/18/@Lombok%E6%B3%A8%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>Lombok 是一个 Java 库，可以通过注解的方式来简化 Java 代码的编写。虽然 Lombok 的使用可以减少代码量，并提高代码的可读性和可维护性，但是在使用的时候还是需要注意一些坑点。</p><p>以下是一些常见的 Lombok 使用坑点：</p><ol><li>@Data 注解可能会导致无限递归。@Data 注解会自动生成 getter、setter、toString、equals、hashCode 方法，如果在类中包含了自己的实例变量，那么就会导致无限递归。因此，在使用 @Data 注解时需要注意这个问题，可以使用其他注解来代替。</li><li>@Builder 注解需要注意链式调用的顺序。@Builder 注解可以用于创建复杂对象，使用链式调用的方式设置属性。但是需要注意的是，设置属性的顺序需要与构造函数的参数顺序一致，否则会导致属性设置错误。</li><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解可能会导致构造函数参数过多。@AllArgsConstructor 注解会生成一个包含所有实例变量的构造函数，而 @RequiredArgsConstructor 注解则会生成一个包含必需实例变量的构造函数。这两个注解都可能会导致构造函数参数过多的问题，需要根据实际情况进行选择。</li><li>@Synchronized 注解可能会导致性能问题。@Synchronized 注解可以用于对方法进行同步，但是会导致性能问题。因此在使用 @Synchronized 注解时需要注意控制同步的范围，避免出现性能问题。</li><li>IDEA 等 IDE 工具可能无法正确识别 Lombok 注解。虽然 Lombok 支持大多数主流的 IDE 工具，但是有时候会出现 IDE 工具无法正确识别 Lombok 注解的情况。如果遇到这种情况，可以尝试更新 IDE 工具的插件或者升级 Lombok 的版本。</li></ol><p>以上是一些常见的 Lombok 使用坑点，需要在使用 Lombok 时注意。</p><hr><ol><li>@Data 注解导致无限递归的案例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Role</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> <span class="keyword">extends</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserAndRole</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">1L</span>);</span><br><span class="line">        user1.setUsername(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;password1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setId(<span class="number">2L</span>);</span><br><span class="line">        user2.setUsername(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        user2.setPassword(<span class="string">&quot;password2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Role</span> <span class="variable">role1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>();</span><br><span class="line">        role1.setId(<span class="number">1L</span>);</span><br><span class="line">        role1.setRoleName(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Role</span> <span class="variable">role2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>();</span><br><span class="line">        role2.setId(<span class="number">2L</span>);</span><br><span class="line">        role2.setRoleName(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        user1.getRoles().add(role1);</span><br><span class="line">        user1.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">        user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">        role2.getUsers().add(user1);</span><br><span class="line">        role2.getUsers().add(user1);</span><br><span class="line">        role2.getUsers().add(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1.toString());</span><br><span class="line">        System.out.println(role1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，User 类和 Role 类之间是多对多的关系，都包含了对方的实例变量。这样在使用 @Data 注解时，会导致无限递归，从而导致 StackOverflowError 错误。</p><p>解决方法：</p><p>可以使用 @ToString、@EqualsAndHashCode、@Getter、@Setter、@RequiredArgsConstructor 注解来代替 @Data 注解，分别生成 toString、equals、hashCode、getter、setter、构造函数等方法。</p><ol start="2"><li>@Builder 注解链式调用顺序错误的案例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">    .username(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    .age(<span class="number">20</span>)</span><br><span class="line">    .id(<span class="number">1L</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中，使用 @Builder 注解创建 User 对象时，设置属性的顺序与构造函数的参数顺序不一致，导致创建 User 对象时属性设置错误。</p><p>解决方法：</p><p>需要保证设置属性的顺序与构造函数的参数顺序一致，可以使用 @Builder.Default 注解为属性设置默认值来解决这个问题。</p><ol start="3"><li>@AllArgsConstructor 和 @RequiredArgsConstructor 注解导致构造函数参数过多的案例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 省略 getter、setter 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;test@test.com&quot;</span>, <span class="string">&quot;123456789&quot;</span>, <span class="string">&quot;北京市&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中，使用 @AllArgsConstructor 注解为 User 类生成了一个包含所有实例变量的构造函数，导致构造函数参数过多，不便于使用。</p><p>解决方法：</p><p>可以使用 @NoArgsConstructor、@NonNull、@Builder 等注解来代替 @AllArgsConstructor 注解，根据实际情况选择合适的注解。</p><ol start="4"><li>@Synchronized 注解导致性能问题的案例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中，使用 @Synchronized 注解对 updateUser 方法进行同步，但是这会导致性能问题。</p><p>解决方法：</p><p>可以通过其他方式来控制同步的范围，如使用 synchronized 关键字或者使用 Lock 接口等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
